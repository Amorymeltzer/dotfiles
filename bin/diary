#!/usr/bin/env bash
# diary by Amory Meltzer
# Basic script to handle a basic diary

function help {
    cat <<END_HELP
Usage: $(basename $0) [-h] [new|notes|last|show|rand|log|remove|rm|delete|YYY-MM-DD|stats]

  Without any parameters, diary will open today's entry for you; if it hasn't
  been started yet, it will create the file with, and populate it with the
  content of a "notes" file.  If you're not in the directory defined by the
  $DIARY_DIR environment variable, it will exit.

  Other options:

  new			Create a new file, without opening
  notes			Edit the notes file
  last			Display the last diary entry
  show [YYYY-MM-DD]	Show a given entry, or the last entry if no date provided
  rand			Display a random diary entry
  log			Commit today's file, only if the directory is managed by git
  remove, rm, delete	Remove today's entry, if present
  YYYY-MM-DD		Display the diary entry from a specific day
  stats			Display some basic statistics
END_HELP
}

while getopts 'h' opt; do
    case $opt in
	h) help $0
	   exit 0;;
    esac
done

if [[ -z "$DIARY_DIR" ]]; then
    echo "No diary directory configured, please set \$DIARY_DIR"
    exit 1
elif [[ $(pwd) != "$DIARY_DIR" ]]; then
    echo "Not in $DIARY_DIR, exiting"
    exit 1
fi


today=$(date +"%Y-%m-%d").md

function newDay {
    if [[ ! -f $today ]]; then
	title=$(date +"%A, %B %d, %Y")
	printf "## $title\n\n" > $today
	notes=$(cat notes)
	if [[ -n $notes ]]; then
	    printf "### Thoughts ###\n" >> $today
	    echo "$notes" >> $today
	fi
	printf "### Morning\n\n\n### Afternoon\n\n\n### Evening\n" >> $today
    fi
}

if [[ ! $1 ]]; then
    newDay
    $VISUAL "$today"
else
    # Optional .md to allow for bash completion, removed in showDate
    function validDate {
	[[ $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}(\.md)?$ ]]
    }
    function showDate {
	if date=$1 && date=$(sed 's/\.md$//' <<< "$date") && validDate "$date" && [[ -f "$date.md" ]]; then
	    cat "$date.md"
	else
	    echo "No entry for $date"
	    exit 1
	fi
    }

    # Show a specific date
    if validDate "$1"; then
	showDate "$1"
    else
	function showLast {
	    cat $(ls -1tr *.md | tail -n 2 | grep -v $today | tail -n 1)
	}

	case "$1" in
	    "new") newDay;;
	    "notes") $VISUAL notes;;
	    "last")
		# Display latest entry, not including today's
		showLast;;
	    "show")
		# Show the specific entry
		[[ $2 ]] && showDate "$2" || showLast;; # Second param by this point
	    "rand")
		# Display a random entry
		cat $(ls -1 | shuf | head -n 1);;
	    "remove"|"rm"|"delete")
		[ -f "$today" ] && rm "$today" || echo "No entry for today found";;
	    "log")
		# Commit entry, if git
		[[ ! $(git rev-parse --is-inside-work-tree 2>/dev/null) ]] && exit 1
		# Reset the index, just in case
		git reset HEAD --

		# Ensure there's just one file, and that it's today
		status=$(git status --porcelain)
		if [[ $(wc -l <<< "$status") -ne 1 ]]; then
		    echo "Too many files present, exiting"
		    exit 1
		elif [[ "$(cut -c 4- <<< "$status")" != "$today" ]]; then
		    echo "File isn't for today, exiting"
		    exit 1
		fi

		git add $today
		# Commit if untracked, amend if already present
		if [[ "$(cut -c 1-2 <<< "$status")" == "??" ]]; then
		    git commit -m $today
		elif [[ "$(cut -c 1-2 <<< "$status")" == " M" ]]; then
		    git commit --amend --no-edit
		else
		    echo "$status"
		    echo "Unknown situation, exiting"
		    exit 1
		fi;;
	    "stats")
		# Basic stats, should expand this (days done (since date?), etc.)
		# This should be find but whatever
		files=$(ls -1 | grep -E "\d{4}-\d{2}-\d{2}\.md")
		total=$(wc -l <<<"$files" | tr -d ' ')
		if [[ $total -gt 0 ]]; then
		    IFS=$'\n' results=($(cut -f 1 -d - <<<"$files" | sort | uniq -c))
		    for result in "${results[@]}"; do
			result=$(cut -c 3- <<<"${result}")
			year="${result#*' '}"
			count="${result%' '*}"
			echo -n "$year: $count "
			if [[ $count -ge 2 ]]; then
			    echo "entries"
			else
			    echo "entry"
			fi
		    done
		    echo "$total total"
		else
		    echo "No entries found"
		fi;;
	    *) echo "Unknown option"
	       exit 1;;
	esac
    fi
fi
