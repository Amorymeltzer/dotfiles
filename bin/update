#!/usr/bin/env bash
# update by Amory Meltzer
# UPDATE ALL THE THINGS!!!
# Fight https://xkcd.com/1579/

## TODO:
## More sudo deescalation (macports, cpan, gem)
## Better color management
## Detect errors

function help {
    cat <<END_HELP
Usage: $(basename "$0") [-bBmMeEkKWcCnNgrRpPLhH] [-Sd]

  -S		Skip all items that might need sudo (Macports, CPAN, ruby, homebrew-cask)
  -d		Debug mode: outputs timestamps for actions (WIP)

  -b		skip updating macports base, but still 'port sync' to update definitions
  -B		skip updating macports base AND skip 'port sync' to update definitions
  -m		check for macports updates but don't upgrade
  -M		skip all macports actions
  -e		check for homebrew updates but don't upgrade
  -E		skip all homebrew actions
  -k		check for homebrew-cask updates but don't upgrade
  -K		skip all homebrew-caske actions
  -W		skip all homebrew and homebrew-cask updates
  -c		check for cpan updates but don't upgrade
  -C		skip all cpan actions
  -n		check for npm nodejs updates (global) but don't upgrade
  -N		skip all npm nodejs actions
  -g		skip updating gem itself
  -r		check for ruby updates but don't upgrade
  -R		skip all ruby actions
  -p		check for python updates but don't upgrade
  -P		skip all python actions
  -L		skip all emacs lisp actions
  -h -H		this help
END_HELP
}

# Parse commandline options
while getopts 'SdbBcCeEgkKWLmMnNpPrRhH' opt; do
    case $opt in
	S) nosudo='1';;
	d) debug='1';;
	b) port_base_flag='1';;
	B) port_tree_flag='2';;
	m) macports_flag='1';;
	M) macports_all_flag='2';;
	e) brew_flag='1';;
	E) brew_all_flag='2';;
	k) brewcask_flag='1';;
	K) brewcask_all_flag='2';;
	W) homebrew_all_flag='2';;
	c) cpan_flag='1';;
	C) cpan_all_flag='2';;
	n) npm_flag='1';;
	N) npm_all_flag='2';;
	g) gem_flag='1';;
	r) ruby_flag='1';;
	R) ruby_all_flag='2';;
	p) python_flag='1';;
	P) python_all_flag='2';;
	L) emacs_all_flag='2';;
	h|H) help
	     exit 0;;
	*) printf "Invalid option provided, try %s -h\n" "$0" >&2
	    exit 1;;
    esac
done


# Modify output for debugging
bug () {
    if [[ -n "$debug" ]]; then
	echo -ne "$(date -u +'%H:%M') "
    fi
}

# Efficiently colorize
updating () {
    bug && echo -e "${Color_Cyan}Updating ${Color_Magenta_Intense}$1${Color_zOff}..."
}
cleaning () {
    bug && echo -e "${Color_White}Cleaning ${Color_Magenta_Intense}$1${Color_zOff}..."
}
# FIXME TODO What's the issue?
checking () {
    bug && echo -e "${Color_Green}Checking ${Color_Magenta_Intense}$1${Color_zOff}..."
}


# Die if the whole script is run as sudo, just used for specific commands
# id -u also fine?
if [[ $EUID == 0 ]]; then
    echo "Please don't use sudo!"
    exit 1
fi

if [[ -z $nosudo ]]; then
    # Ask for sudo early when possibly needed
    # Could be smarter about various suboptions, esp around ruby
    if [[ -z $macports_all_flag ]] || [[ -z $cpan_all_flag ]] || [[ -z $ruby_all_flag ]] || [[ -z $brewcask_flag ]]; then
	sudo -v
    fi
fi

# Keep-alive: update existing `sudo` time stamp until finished
# Originally from https://gist.github.com/cowboy/3118588, but probably most
# famously used in https://github.com/mathiasbynens/dotfiles
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


# Capture things it suggests, like port select and so on ;;;;;; ##### FIXME TODO
# Uses sudo
if [[ -z $nosudo && -z $macports_all_flag ]]; then
    if [[ -z $port_tree_flag ]]; then
	if [[ -z $port_base_flag ]]; then
	    updating 'Macports base'
	    sudo port selfupdate
	else
	    updating 'Macports tree'
	    sudo port sync
	fi
    fi
    checking 'Macports'
    port_todo=$(port outdated | tail +2)
    if [[ -n $port_todo ]]; then
	echo "$port_todo"
	# Remove now-unnecessary version info
	port_todo=$(cut -f 1 -d ' ' <<< "$port_todo")
	echo -e "${Color_Green}What's new in ${Color_Red_Intense}MacPorts${Color_zOff}..."
	echo "$port_todo" | xargs -n 1 ~/bin/port-whatsnew.sh
	if [[ -z $macports_flag ]]; then
	    updating 'Macports'
	    bug && echo "${port_todo[@]}" | xargs bash -c 'for arg; do sudo port -p upgrade "$arg"; done' _
	    cleaning 'Macports'
	    sudo port uninstall inactive;
	    if [[ -n $(port echo leaves) ]]; then
		while [[ -n $(port echo leaves) ]]; do
		    echo -e "${Color_Green}Logging and cleaning leaves${Color_zOff}..."
		    port echo leaves >> ~/port_leaves_log.txt;
		    sudo port uninstall leaves;
		done
	    else
		echo -e "${Color_Green}No leaves to clean!${Color_zOff}"
	    fi

	    # Check leaves for installation candidates, reset 8 June 2020
	    readarray -t big_leaves < <(cut -f 1 -d ' ' ~/port_leaves_log.txt | sort | uniq -c | sort -r | head -n 5 | awk '{$1=$1;print};')
	    for leaf in "${big_leaves[@]}"; do
		count="${leaf%%' '*}"
		if [[ "$count" -ge 25 ]]; then
		    echo -e "${Color_White}${leaf#*' '} is a good candidate for installation ($count)${Color_zOff}"
		fi
	    done

	    cleaning 'ports'
	    sudo port -q clean --all installed
	fi
    else
	echo -e "${Color_Green}Ports already up-to-date!${Color_zOff}"
    fi
fi

# Uses sudo
if [[ -z $nosudo && -z $ruby_all_flag ]]; then
    if [[ -z $gem_flag ]]; then
	updating 'gem ruby manager'
	sudo gem update --system
    fi
    checking 'ruby gems'
    ruby_todo=$(gem outdated)
    if [[ -n $ruby_todo ]]; then
	echo "$ruby_todo"
	if [[ -z $ruby_flag ]]; then
	    updating 'ruby gems'
	    bug && echo "${ruby_todo[@]}" | cut -f 1 -d ' ' | xargs bash -c 'for arg; do sudo gem update "$arg"; done' _
	    cleaning 'ruby gems'
	    sudo gem cleanup;
	fi
    else
	echo -e "${Color_Green}ruby gems already up-to-date!${Color_zOff}"
    fi
fi

# Uses sudo; requires cpan-outdated https://metacpan.org/pod/cpan-outdated
if [[ -z $nosudo && -z $cpan_all_flag ]]; then
    checking 'CPAN modules'
    cpan_todo=$(cpan-outdated --verbose --exclude-core)
    if [[ -n $cpan_todo ]]; then
	echo "$cpan_todo"
	if [[ -z $cpan_flag ]]; then
	    updating 'CPAN modules'
	    cpan_todo=$(cut -f 1 -d ' ' <<< "$cpan_todo")

	    if [[ -f $(command -v cpanm) ]]; then
		if [[ -f $(command -v cpanm-reporter) ]]; then
		    # Submit tests via cpanm
		    bug && echo "${cpan_todo[@]}" | xargs bash -c 'for arg; do sudo cpanm "$arg"; cpanm-reporter; done' _
		else
		    bug && echo "${cpan_todo[@]}" | xargs bash -c 'for arg; do sudo cpanm "$arg"; done' _
		fi
	    else
		bug && echo "${cpan_todo[@]}" | xargs bash -c 'for arg; do sudo cpan -i "$arg"; done' _
		# Unnecessary with cpanm
		cleaning 'CPAN directories'
		sudo cpanclean;
	    fi
	fi
    else
	echo -e "${Color_Green}CPAN modules already up-to-date!${Color_zOff}"
    fi
fi

## Should probably make this verbose or something
if [[ -z $homebrew_all_flag ]]; then
    updating 'Homebrew repository'
    brew update
    if [[ -z $brew_all_flag ]]; then
	brew_todo=$(brew outdated --formula)
	if [[ -n $brew_todo ]]; then
	    echo "$brew_todo"
	    if [[ -z $brew_flag ]]; then
		updating 'brews'
		# brew upgrade now handles casks, but I still prefer cu
		bug && echo "${brew_todo[@]}" | xargs bash -c 'for arg; do brew upgrade --formula "$arg"; done' _

		cleaning 'brews'
		brew cleanup -s
	    fi
	else
	    echo -e "${Color_Green}brews already up-to-date!${Color_zOff}"
	fi
    fi

    # Might use sudo
    if [[ -z $nosudo && -z $brewcask_all_flag ]]; then
	# Uses brew cu, mainly for the superior pinning ability
	# https://github.com/buo/homebrew-cask-upgrade
	# Want autoupdating casks, but not latest
	cask_todo=$(brew outdated --cask --greedy --verbose|grep -v latest)
	if [[ -n $cask_todo ]]; then
	    echo "$cask_todo"
	    if [[ -z $brewcask_flag ]]; then
		updating 'casks'
		# Some apps require sudo
		brew cu -aqy --no-brew-update

		cleaning 'casks'
		brew cleanup -s
	    fi
	else
	    echo -e "${Color_Green}casks already up-to-date!${Color_zOff}"
	fi
    fi
fi

if [[ -z $npm_all_flag ]]; then
    checking 'npm nodejs packages (global)'
    # Means I miss out on the cool coloring in the output
    npm_todo=$(npm outdated --global)
    if [[ -n $npm_todo ]]; then
	echo "$npm_todo"
	if [[ -z $npm_flag ]]; then
	    updating 'npm nodejs packages (global)'
	    # skip column headers, pass package names to npm install since
	    # global implies caret semver https://github.com/npm/cli/issues/746
	    bug && echo "${npm_todo[@]}" | tail -n +2 | cut -f 1 -d ' ' | xargs bash -c 'for arg; do npm install --global "$arg"; done' _
	fi
    else
	echo -e "${Color_Green}npm nodejs packages already up-to-date!${Color_zOff}"
    fi
fi

if [[ -z $python_all_flag ]]; then
    checking 'pip python packages'
    python_todo=$(pip list --outdated --user)
    if [[ -n $python_todo ]]; then
	echo "$python_todo"
	if [[ -z $python_flag ]]; then
	    updating 'pip python packages'
	    bug && grep -v '^\-e' <<< "$python_todo" | cut -d ' ' -f 1 | tail +3 | xargs bash -c 'for arg; do pip install --upgrade --user "$arg"; done' _
	fi
    else
	echo -e "${Color_Green}pip python packages already up-to-date!${Color_zOff}"
    fi
fi

if [[ -z $emacs_all_flag ]]; then
    updating 'emacs lisp packages'
    update_elisp.sh;
fi
