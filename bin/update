#!/usr/bin/env bash
# update by Amory Meltzer
# UPDATE ALL THE THINGS!!!
## brew/cask sudo deescalation
## fix doutdated
## Need to exit if not run as 'sudo update'
## Better color management

function help {
    cat <<END_HELP
Usage: $1 [-bcCekmMpPrRhH]]

  -b		don't update macports base, but 'port sync' to update tree
  -c		check for cpan updates but don't upgrade
  -C		skip all cpan actions
  -e		skip all homebrew updates
  -k		skip all homebrew-cask updates
  -m		check for macports updates but don't upgrade
  -M		skip all macports actions
  -p -P		skip all python actions
  -r -R		skip all ruby actions
  -h -H		this help
END_HELP
}

base_flag="0"
cpan_flag="0"
macports_flag="0"
python_flag="0"
ruby_flag="0"
homebrew_flag="0"
brewcask_flag="0"
# Parse commandline options
while getopts "bcCekmMpPrRhH" opt; do
    case $opt in
	b) base_flag="1";;
	c) cpan_flag="1";;
	C) cpan_flag="2";;
	e) homebrew_flag="1";;
	k) brewcask_flag="1";;
	m) macports_flag="1";;
	M) macports_flag="2";;
	p|P) python_flag="1";;
	r|R) ruby_flag="1";;
	h|H) help $0
	     exit 0;;
	\?) printf "Invalid option: -"$opt", try $0 -h\n" >&2
            exit 1;;
	:) printf "Option -"$opt" requires an argument, try $0 -h\n" >&2
           exit 1;;
    esac
done

# Efficiently colorize
updating () {
    echo -e "${Color_Cyan}Updating ${Color_Magenta_Intense}$1${Color_zOff}..."
}
cleaning () {
    echo -e "${Color_White}Cleaning ${Color_Magenta_Intense}$1${Color_zOff}..."
}
# FIXME TODO
checking () {
    echo -e "${Color_Green}Checking ${Color_Magenta_Intense}$1${Color_zOff}..."
}

# Ask for sudo early
sudo -v

# Do things it suggests, like port select and so on ;;;;;; ##### FIXME TODO
if [ $macports_flag -lt 2 ]; then
    if [ $base_flag -lt 1 ]; then
	updating 'Macports base'
	port selfupdate
    else
	updating 'Macports tree'
	port sync
    fi
    checking 'Macports'
    if [[ -n $(port echo outdated) ]]; then
	port outdated
	echo -e "${Color_Green}What's new in ${Color_Red_Intense}MacPorts${Color_zOff}..."
	port echo outdated | cut -f 1 -d " " | xargs -n 1 ~/bin/port-whatsnew.sh
	if [ $macports_flag -lt 1 ]; then
	    updating 'Macports'
	    port upgrade outdated
	    cleaning 'Macports'
	    port -v uninstall inactive;
	    if [[ -n $(port echo leaves) ]]; then
		echo -e "${Color_Green}Logging leaves${Color_zOff}..."
		port echo leaves >> ~/port_leaves_log.txt;
		cleaning 'leaves'
		port -v uninstall leaves;
	    else
		echo -e "${Color_Green}No leaves to clean!${Color_zOff}"
	    fi
	    cleaning 'ports'
	    port clean -v --all installed
	fi
    else
	echo -e "${Color_Green}Ports already up-to-date!${Color_zOff}"
    fi
fi

if [ $python_flag -lt 1 ]; then
    updating 'pip python packages'
    pipupgrade;
fi

if [ $ruby_flag -lt 1 ]; then
    updating 'gem ruby manager'
    gem update --system
    updating 'ruby gems'
    gem update
    cleaning 'ruby gems'
    gem cleanup;
fi

if [ $cpan_flag -lt 2 ]; then
    checking 'CPAN modules'
    cpan-outdated --verbose
    if [ $cpan_flag -lt 1 ]; then
	updating 'CPAN modules'
	cpan-outdated | xargs cpan -i
    fi
    cleaning 'CPAN directories'
    cpanclean;
fi

## Should probably make this verbose or something
# This should properly be 'brew update', but I like seeing what's changed in
# homebrew-cask, and the two are inextricably linked, so for now this must
# do.  I suppose I could do a version of 'git up' in each respective
# repository, but that sort of seems excessive
sudo -u $SUDO_USER brew cask new
if [ $homebrew_flag -lt 1 ]; then
    if [[ $(brew outdated 2> /dev/null) ]]; then
	updating 'Homebrew'
	sudo -u $SUDO_USER brew outdated
	sudo -u $SUDO_USER brew upgrade

	cleaning 'Homebrew'
	sudo -u $SUDO_USER brew cleanup -ns
	sudo -u $SUDO_USER brew cleanup -s
    else
	echo -e "${Color_Green}Homebrew packages and taps already up-to-date!${Color_zOff}..."
    fi
fi

# Not perfect, but uses the external brewcask-doutdated.rb command to grab
# a list of outdated casks, then --force reinstalls them
if [ $brewcask_flag -lt 1 ]; then
    if [[ $(brew cask doutdated &> /dev/null) ]]; then
	checking 'casks'
	sudo -u $SUDO_USER brew cask doutdated
	updating 'casks'
	sudo -u $SUDO_USER "brew cask doutdated | xargs brew cask install --force"

	cleaning 'casks'
	sudo -u $SUDO_USER brew cask cleanup
    else
	#  echo -e "${Color_Green}casks already up-to-date!${Color_zOff}"
	echo -e "${Color_Red}cask updates currently nonfunctional${Color_zOff}"
    fi
fi
