#!/usr/bin/env python
# Print MLB standings table using https://github.com/toddrob99/MLB-StatsAPI
# Basically trying to recreate https://github.com/spraints/mlb-standings
# Team W L PCT GB HOME ROAD RS RA DIFF STRK

# Recreate formatted standings output, incorporating league_rank and sport_rank
# https://github.com/toddrob99/MLB-StatsAPI/blob/a31a84b2eaaace1636d7ed08323b999fce2069e7/statsapi/__init__.py#L1309
def ranked_standings(
        leagueId="103,104",
        division="all",
        include_wildcard=False,
        season=None,
        standingsTypes=None,
        date=None,
        leagueRank=False,
        sportsRank=False
):
    """Get formatted standings for a given league/division and season."""
    divisions = statsapi.standings_data(
        leagueId, division, include_wildcard, season, standingsTypes, date
    )

    standings = "{:^4} {:<21} {:^3} {:^3} {:^4}\n".format(
        *["Rank", "Team", "W", "L", "(E#)"]
    )
    if sportsRank:
        # It's 30, and given the structure of this, there's no point in pretending
        # to calculate it when it's just simply 30.
        teams=list(range(30))
        for div in divisions.values():
            for t in div["teams"]:
                teams[int(t['sport_rank'])-1]=t

        # Annoying to go through everything twice just to sort 'em, but that's the
        # data structure we've got!  At least it's always short.
        for t in teams:
            standings += "{sport_rank:^4} {name:<21} {w:^3} {l:^3} {elim_num:^4}\n".format(
                **t
            )
    elif leagueRank:
        # It's 15, and given the structure of this, there's no point in pretending
        # to calculate it when it's just simply 15.
        teams=list(range(15))
        for div in divisions.values():
            for t in div["teams"]:
                teams[int(t['league_rank'])-1]=t

        # Annoying to go through everything twice just to sort 'em, but that's the
        # data structure we've got!  At least it's always short.
        for t in teams:
            standings += "{league_rank:^4} {name:<21} {w:^3} {l:^3} {elim_num:^4}\n".format(
                **t
            )

    return standings

import sys
argN=len(sys.argv)
league='103,104'
if argN>=3:
    exit()

import statsapi
if argN==2:
    opt=sys.argv[1]
    if opt=='sort' or opt=='rank':
        standings=ranked_standings(sportsRank=True)
        print(standings, end='')
        exit()
    elif opt=='league':
        standings="American League\n"
        standings+=ranked_standings(leagueId=103,leagueRank=True)
        standings+="\nNational League\n"
        standings+=ranked_standings(leagueId=104,leagueRank=True)
        print(standings, end='')
        exit()
    else:
        if opt=='al' or opt=='a':
            league='103'
        elif opt=='nl' or opt=='n':
            league='104'

# Maybe remove pointless Rank?  Redundant with listing FIXME TODO
import datetime
# Only show wildcard info August and September
month=datetime.datetime.now().month
if month==8 or month==9:
    standings=statsapi.standings(leagueId=league)
else:
    standings=statsapi.standings(leagueId=league, include_wildcard=False)

print(standings, end='')
