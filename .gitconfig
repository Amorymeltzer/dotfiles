[hub]
protocol = https

[github]
user = Amorymeltzer

[user]
name = Amory Meltzer
email = Amorymeltzer@gmail.com

[credential]
helper = osxkeychain

[core]
editor = emacs
# Use custom `.gitignore`
excludesfile = ~/.global-gitignore

# Treat spaces before tabs, lines that are indented with 8 or more spaces,
# and all kinds of trailing whitespace as an error
# [default] trailing-space: look for spaces at the end of a line
# [default] space-before-tab: look for spaces before tabs at beginning of line
whitespace = space-before-tab,indent-with-non-tab,trailing-space

# Make `git rebase` safer on OS X 10.7+ with autosave/versions
# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
trustctime = false

# Prevent showing files whose names contain non-ASCII symbols as unversioned.
# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
precomposeunicode = false

# Use 12 characters for the abbreviated commit hash. See:
# http://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
# Via: http://git.io/QXnAqw
# abbrev = 12

[alias]
h = help
cfg = config --global

# Depends on hub
home = browse
repo = browse
pulls = browse -- pulls
issues = browse -- issues
mypulls = browse -- pulls/amorymeltzer
commits = browse -- commits

notifications = "!browser https://github.com/notifications"
allpulls = "!browser https://github.com/pulls"
allissues = "!browser https://github.com/issues"

open = "!github-open "

first-commit = "!git init && git commit --alow-empty -m 'Initial commit'"

c = commit
cm = commit -m
amend = commit --amend
a = add
aa = add -A
all = add -A
aas = "!git aa; git s"

scan = "!~/bin/gscan"

co = checkout
com = checkout master
cog = checkout gh-pages
wc = whatchanged

stat = status
st = status
s = status --short --branch
sn = status --untracked=no
# Do something more interesting/useful/unified with these
l = log --decorate --graph
l5 = log --decorate --graph -5
l1 = log --oneline --decorate
l15 = log --oneline --decorate -5

ld = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=relative
ld5 = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=relative -5
lf = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=short
lf5 = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=short -5
# Yet another one: https://github.com/jfrazelle/mac-dev-setup#bash-completions
lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) (%ar)%C(bold blue)<%an>%Creset' --abbrev-commit

# TODO
#ls = ls-files

# View abbreviated SHA, description, and history graph of the latest 20 commits
graph = log --pretty=oneline --graph --abbrev-commit --decorate

# Like "git show myfile", but uses the last commit that changed "myfile".
showlast = log -n 1 -p
# List contributors with number of commits
contributors = "!git --no-pager shortlog --summary --numbered"
commit-counts = "!git --no-pager shortlog --summary --numbered"

difflog = log -u
rl = reflog --decorate

cl = clone

b = branch
br = branch

# Show verbose output about tags, branches or remotes
tags = tag -l
branches = branch -a
remotes = remote -v

branchdata = branch -a -vv
brd = branch -a -vv

# Create and/or go to a branch
go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

# Easily rememberable
remove-merged-branches = delete-merged-branches
list-large-files = big-object-report

rb = rebase
reb = rebase
rbm = rebase master
rebm = rebase master
# Interactive rebase with the selected number of latest commits
rebi = "!r() { git rebase -i HEAD~$1; }; r"

# Push and Pull
po = push origin
pom = push origin master
pog = push origin gh-pages
# Use rebase to prevent unnecessary commits
pum = pull --rebase origin master
# Personal remote
pa = push Amorymeltzer
pam = push Amorymeltzer master

d = diff --word-diff
df = diff --word-diff
dc = diff --cached --word-diff
ds = diff --patch-with-stat
dsc = diff --cached --patch-with-stat
dcs = diff --cached --patch-with-stat
# Use icdiff tool https://github.com/jeffkaufman/icdiff
icd = icdiff
ic = icdiff
icdc = icdiff --cached
icc = icdiff --cached

patience = diff --patience

# Goodness (summary of diff lines added/removed/total)
# FIXME TODO: Colorize
gn = goodness
gnc = goodness --cached

# Divergence (commits we added and commits remote added)
# FIXME TODO: Colorize
div = divergence

# Credit an author on the latest commit
credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

# Get short SHA-1 for object
sha = rev-parse --short HEAD
hash = rev-parse HEAD

unstage = reset HEAD --
re = reset
reh = reset --hard
res = reset --soft

# Assume/Unassume changes
assume = update-index --assume-unchanged
unassume = update-index --no-assume-unchanged
assumed = "!git ls-files -v | grep ^h | cut -c 3-"
assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

ignored = "!git clean -ndX | sed 's/Would remove //g'"

# Show list of files in a conflict state.
conflicts = "!git ls-files -u | awk '{print $4}' | sort -u"

# List all aliases
aliases = "!git config -l | grep alias | cut -c 7-"

# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"
# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"
# Find commits by source code
fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%an] %Cred%d' --decorate --date=short -S$1; }; f"
# Find commits by commit message
fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%an] %Cred%d' --decorate --date=short --grep=$1; }; f"

# https://gist.github.com/phinze/83387035c233db7c521e by @phinze
# git timespan FROMREF [TOREF] [FORMAT]
# TOREF: defaults to HEAD
# FORMAT: defaults to %mm%dd
# uses `ddiff` from the `dateutils` package
# available via: brew install dateutils, apt-get install dateutils, etc
timespan = "!f() { one=$(git log -n 1 --format=%ai $1); two=$(git log -n 1 --format=%ai ${2:-HEAD}); ddiff -f ${3:-%mm-%dd-%Hh-%Mm} \"$one\" \"$two\"; }; f"


[rebase]
# --autostash: Automatically stash before rebase; allows for dirty rebases
autoStash = true

[help]
# If there's only suggestion from a typo, automatically call it
autocorrect = 1

# Special diffs for special cases
[diff "bin"]
textconv = hexdump -v -C

[diff "zip"]
textconv = unzip -v

[diff "png"]
binary = true
textconv = hexdump -v -C

[diff "jpg"]
binary = true
textconv = hexdump -v -C

[diff "jpeg"]
binary = true
textconv = hexdump -v -C

[color]
# Use colors in Git commands that are capable of colored output when outputting to the terminal
ui = auto

[color "branch"]
current = cyan reverse
local = normal
remote = green

[color "diff"]
meta = white
frag = magenta bold
old = red
new = green

[color "status"]
added = magenta
changed = green
untracked = cyan

[gc]
auto = 256

[push]
default = simple
# Make `git push` push relevant annotated tags when pushing branches out.
followTags = true

[merge]
# Include summaries of merged commits in newly created merge commit messages
log = true

[log]
date = local

# URL shorthands
[url "git@github.com:"]
insteadOf = "gh:"
pushInsteadOf = "github:"
pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
insteadOf = "github:"
[url "git@gist.github.com:"]
insteadOf = "gst:"
pushInsteadOf = "gist:"
pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
insteadOf = "gist:"

[filter "media"]
required = true
clean = git media clean %f
smudge = git media smudge %f
[rebase]
	autostash = true
