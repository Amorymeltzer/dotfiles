#!/usr/bin/env bash
# update by Amory Meltzer
# UPDATE ALL THE THINGS!!!
## brew/cask sudo deescalation
## fix doutdated

function help {
    cat <<END_HELP
Usage: $1 [-c] [-C] [-h]

  -c		check for cpan updates but don't upgrade
  -C		skip all cpan actions
  -h		this help
END_HELP
}

cpan_flag="0"
# Parse commandline options
while getopts "cCh" opt; do
    case $opt in
	c ) cpan_flag="1";;
	C ) cpan_flag="2";;
	h ) help $0
	    exit 0;;
	\?) printf "Invalid option: -"$opt", try $0 -h\n" >&2
            exit 1;;
	: ) printf "Option -"$opt" requires an argument, try $0 -h\n" >&2
            exit 1;;
    esac
done

# Ask for sudo early
sudo -v

# Need to find a way to do things it suggests, like port select and so on
# ;;;;;; ##### FIXME TODO
echo -e "${Color_Cyan}Updating ${Color_Red_Intense}MacPorts base${Color_zOff}..."
port selfupdate
echo -e "${Color_Green}Checking ${Color_Red_Intense}MacPorts${Color_zOff}..."
port echo -v outdated
echo -e "${Color_Green}What's new in ${Color_Red_Intense}MacPorts${Color_zOff}..."
port echo outdated | cut -f 1 -d" " | xargs -n 1 ~/bin/port-whatsnew.sh
echo -e "${Color_Cyan}Updating ${Color_Red_Intense}MacPorts${Color_zOff}..."
port upgrade outdated
echo -e "${Color_White}Cleaning ${Color_Red_Intense}MacPorts${Color_zOff}..."
port -v uninstall inactive;
echo -e "${Color_Green}Logging leaves${Color_zOff}..."
port echo leaves >> ~/port_leaves_log.txt;
echo -e "${Color_White}Removing ${Color_Red_Intense}leaves${Color_zOff}..."
port -v uninstall leaves;
echo -e "${Color_White}Cleaning ${Color_Red_Intense}ports${Color_zOff}..."
port clean -v --all installed

echo -e "${Color_Cyan}Updating ${Color_Red_Intense}pip python packages${Color_zOff}..."
pipupgrade;

echo -e "${Color_Cyan}Updating ${Color_Red_Intense}gem ruby manager${Color_zOff}..."
gem update --system
echo -e "${Color_Cyan}Updating ${Color_Red_Intense}ruby gems${Color_zOff}..."
gem update
echo -e "${Color_White}Cleaning ${Color_Red_Intense}ruby gems${Color_zOff}..."
gem cleanup;

if [ $cpan_flag -lt 2 ]; then
    echo -e "${Color_Green}Checking ${Color_Red_Intense}CPAN modules${Color_zOff}..."
    cpan-outdated --verbose
    if [ $cpan_flag -lt 1 ]; then
	echo -e "${Color_Cyan}Updating ${Color_Red_Intense}CPAN modules${Color_zOff}..."
	cpan-outdated | xargs cpan -i
    fi
    echo -e "${Color_White}Cleaning ${Color_Red_Intense}CPAN directories${Color_zOff}..."
    cpanclean;
fi

# Should probably make this verbose or something
echo -e "${Color_Cyan}Updating ${Color_Red_Intense}Homebrew${Color_zOff}..."
# This should properly be 'brew update', but I like seeing what's changed in
# homebrew-cask, and the two are inextricably linked, so for now this must
# do.  I suppose I could do a version of 'git up' in each respective
# repository, but that sort of seems excessive
sudo -u $SUDO_USER brew cask new
if [ $(brew outdated) ]; then
    echo -e "${Color_Cyan}Updating ${Color_Red_Intense}Homebrew${Color_zOff}..."
    sudo -u $SUDO_USER brew outdated
    sudo -u $SUDO_USER brew upgrade
else
    echo -e "${Color_Green}Homebrew packages and taps already up-to-date${Color_zOff}..."
fi
echo -e "${Color_White}Cleaning ${Color_Red_Intense}Homebrew${Color_zOff}..."
sudo -u $SUDO_USER brew cleanup -ns
sudo -u $SUDO_USER brew cleanup -s

# Not perfect, but uses the external brewcask-doutdated.rb command to grab
# a list of outdated casks, then --force reinstalls them
echo -e "${Color_Green}Checking ${Color_Red_Intense}casks${Color_zOff}..."
if [ $(brew cask doutdated) ]; then
    sudo -u $SUDO_USER brew cask doutdated
    echo -e "${Color_Cyan}Updating ${Color_Red_Intense}casks${Color_zOff}..."
    sudo -u $SUDO_USER "brew cask doutdated | xargs brew cask install --force"
else
    echo -e "${Color_Green}brew-cask already up-to-date${Color_zOff}..."
fi

echo -e "${Color_White}Cleaning ${Color_Red_Intense}casks${Color_zOff}..."
sudo -u $SUDO_USER brew cask cleanup
