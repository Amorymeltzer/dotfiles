#!/usr/bin/env bash

# http://entertainment.howstuffworks.com/how-to-play-blackjack.htm
# https://en.wikipedia.org/wiki/Blackjack

## TODO
# Doubling shows up all the time?
# Turn did-you-win stuff into a separate function?  Can't be too bad...
# Commandline option to NOT show correct move
# Better output, show results/score after each playing
# Currently possible to bet more than you have by doubling or splitting
## Only split on first turn?  Or allow resplitting??
## Sometimes double only allowed on 10 or 11?  Uncommon.
## Dealer draw on soft 17?  Minor differences...


function display-helper() {
    sed -e 's/./&,/g; s/0/10/g; s/,$//'
}

function display-hand() {
    local hand card type
    hand=$1
    type=$2
    case $type in
	dealer) echo ${hand:0:1}? | display-helper;;
	player) echo "$(echo ${hand} | display-helper) [$(count-value $hand)]";;
	full) echo "$(echo ${hand} | display-helper) [$(count-value $hand)]";;
    esac
}

function split-hand() {
    # Basically just a modified version of the 'play-round' routine
    # player and ghost should NOT be local
    local hand card base
    hand=$1 # player
    base=${hand:0:1} # Should be the same so get just the first number
    gpbet=$pbet
    player=$base$(draw-card)
    ghost=$base$(draw-card)
    echo Hand one: $(display-hand $player player)
    echo Hand two: $(display-hand $ghost player)

    echo Playing hand one...
    if [ $base != A ]; then	# Only one card if split Aces
	if [ $(count-value $player) != 21 ]; then
	    while true; do
		echo Dealer: $(display-hand $dealer dealer)
		echo Hand one: $(display-hand $player player)

		predict $dealer $player

		case $(get-my-input) in
		    hit)
			echo Hit!
			player=$player$(draw-card)
			#  if [ $(count-value $player) -gt 21 ]; then
			if [ $(count-value $player) -ge 21 ]; then # Stop on 21
			    break
			fi;;
		    double)
			echo Double!
			player=$player$(draw-card)
			((pbet *= 2))
			break;;
		    stand)
			echo Stand!
			break;;
		esac
	    done
	    echo Hand one: $(display-hand $player full)
	fi
	echo Playing hand two...

	if [ $(count-value $ghost) != 21 ]; then
	    while true; do
		echo Dealer: $(display-hand $dealer dealer)
		echo Hand two: $(display-hand $ghost player)

		predict $dealer $ghost

		case $(get-my-input) in
		    hit)
			echo Hit!
			ghost=$ghost$(draw-card)
			#  if [ $(count-value $player) -gt 21 ]; then
			if [ $(count-value $ghost) -ge 21 ]; then # Stop on 21
			    break
			fi;;
		    double)
			echo Double!
			ghost=$ghost$(draw-card)
			((gpbet *= 2))
			break;;
		    stand)
			echo Stand!
			break;;
		esac
	    done
	    echo Hand two: $(display-hand $ghost full)
	fi
    fi
}

function clear-used() {
    >$USEDCARDS
}

function add-used() {
    local hand
    hand=$1
    #  echo $hand | sed -e 's/./&,/g; s/,$//; s/,/\n/g' >> $USEDCARDS
    # tr more successful than sed for converting to a newline
    echo $hand | sed -e 's/./&,/g; s/,$//;' | tr , '\n' >> $USEDCARDS
}

function reshuffle-cards() {
    echo Reshuffle cards >&2
    shuf < $USEDCARDS >> $CARDFILE
    clear-used
}

# function shuffle-cards() {
#     local line array
#     array=(A 2 3 4 5 6 7 8 9 0 J Q K)
#     jot - 0 52 | while true; do
#	read line || break
#	echo ${array[$(($line / 4))]}
#     done | head -n 52 | shuf > $CARDFILE
# }
# Use eight decks instead
function shuffle-cards() {
    local line array
    array=(A 2 3 4 5 6 7 8 9 0 J Q K)
    jot - 0 416 | while true; do
	read line || break
	echo ${array[$((line / 32))]}
    done | head -n 416 | shuf > $CARDFILE
}

function draw-card() {
    if [ $(wc -l <$CARDFILE) -lt 5 ]; then
	reshuffle-cards
    fi
    head -n 1 $CARDFILE
    #  sed -i.bak -e '1d' $CARDFILE
    sed -i '' -e '1d' $CARDFILE
}

function count-value() {
    local hand aces value card i
    hand=$1
    aces=0
    value=0
    for ((i=0; i<${#hand}; i++)); do
	card=${hand:i:1}
	((value += $(echo $card | sed -e '/[1-9]/q; s/[0JQK]/10/; s/A/11/')))
	if [ $card = A ]; then
	    ((aces++))
	fi
    done
    while [ $value -gt 21 -a $aces -gt 0 ]; do
	((value -= 10))
	((aces--))
    done
    echo $value
}

function count-aces() {
    local hand aces value card i
    hand=$1
    aces=0
    value=0
    for ((i=0; i<${#hand}; i++)); do
	card=${hand:i:1}
	((value += $(echo $card | sed -e '/[1-9]/q; s/[0JQK]/10/; s/A/11/')))
	if [ $card = A ]; then
	    ((aces++))
	fi
    done
    while [ $value -gt 21 -a $aces -gt 0 ]; do
	((value -= 10))
	((aces--))
    done
    echo $aces
}

function predict() {
    local dealer player aces type cardone cardtwo
    dealer=$1
    player=$2
    type=H
    aces=$(count-aces $player)
    cardone=$(echo ${player:0:1} | sed -e '/[1-9]/q; s/[0JQK]/10/; s/A/11/')
    cardtwo=$(echo ${player:1:2} | sed -e '/[1-9]/q; s/[0JQK]/10/; s/A/11/')
    shown=$(count-value $(echo ${dealer:0:1}))
    toplay=$(count-value $player)

    if [ $aces -gt 0 ]; then
	type=S
    fi
    if [ "$twohands" != 1 -a "$cardone" = "$cardtwo" ]; then
	type=P
	toplay=$((toplay/2))
	if [ $cardone = 11 ]; then
	    toplay=11
	fi
    fi

    echo "$type $shown $toplay"

    # Shows proper strategy alongside. Good for learning, bad for playing
    # echo -n "You should "
    # echo -en ${Color_Red}
    # todo=$(perl ~/Documents/perl/sandbox/blackjackTester.pl $type $shown $toplay)
    # if [ $todo == H ]; then
    #	echo -en ${Color_Red}
    # elif [ $todo == S ]; then
    #	echo -en ${Color_Yellow_Intense}
    # elif [ $todo == P -o $todo == Ph ]; then
    #	echo -en ${Color_Green}
    # elif [ $todo == D -o $todo == Dh -o $todo == Ds ]; then
    #	echo -en ${Color_Blue}
    # elif [ $todo == R -o $todo == Rh -o $todo == Rs -o $todo == Rp ]; then
    #	echo -en ${Color_White}
    # fi
    # echo $todo
    # echo -en ${Color_zOff}
}

function play-dealer() {
    local hand
    if [ -n "$1" ]; then
	hand=$1
    else
	hand=$(draw-card)$(draw-card)
    fi
    while [ $(count-value $hand) -lt 17 ]; do
	hand=$hand$(draw-card)
    done
    echo $hand
}

function get-char() {
    local line
    read line
    echo ${line:0:1}
}

function get-my-input() {
    local cardone cardtwo
    echo -n "What do? [H]it, [S]tand, [D]ouble" >&2
    cardone=$(echo ${player:0:1} | sed -e '/[1-9]/q; s/[0JQK]/10/; s/A/11/')
    cardtwo=$(echo ${player:1:2} | sed -e '/[1-9]/q; s/[0JQK]/10/; s/A/11/')
    # echo -n "$cardone $cardtwo" >&2
    if [ "$twohands" != 1 -a "$cardone" = "$cardtwo" ]; then
	echo -n ", S[p]lit" >&2
    fi
    echo -n ": " >&2
    case $(get-char) in
	[hH]) echo hit;;
	"") echo hit;; # Default to hit
	[sS]) echo stand;;
	[dD]) echo double;;
	#  [pP]) echo split;;
	[pP]) if [ "$twohands" != 1 -a "$cardone" = "$cardtwo" ]; then
		  echo split
	      else
		  echo $(get-my-input)
	      fi
	      ;;
	*) echo $(get-my-input);;
    esac
}

function play-again() {
    echo -n "Play again!?  [Y]es [N]o:" >&2
    case $(get-char) in
	[yY]) echo yes;;
	"") echo yes;;
	[nN]) echo no;;
	*) play-again;;
    esac
}

function get-a-bet() {
    local maxbet bet
    maxbet=$1
    echo -n "You have $maxbet dollars, BET: " >&2
    read bet
    bet=${bet//[^0-9]/}
    if [ -z "$bet" ]; then
	#  get-a-bet $maxbet
	#  echo 10 # Default to 10 bucks
	bet=10 # Default to 10 bucks
    fi
    #  if [ "$bet" -gt $maxbet -o "$bet" -lt 1 ]; then
    if [ "$bet" -gt $maxbet ]; then
	echo $maxbet # If bet is greater than total, bet it all
    elif [ "$bet" -lt 1 ]; then
	get-a-bet $maxbet
    else
	echo $bet
    fi
}

function play-round() {
    local dealer player dcount pcount pmoney pbet twentyone dtwentyone twohands gpcount
    pmoney=$1
    pbet=$(get-a-bet $pmoney)
    dealer=$(draw-card)
    player=$(draw-card)
    dealer=$dealer$(draw-card)
    player=$player$(draw-card)
    if [ $(count-value $player) = 21 ]; then # If you draw a 21
	twentyone=1 # Set here so I can correctly pay 3:2 later
	if [ $(count-value $dealer) = 21 ]; then # Dealer blackjack=push
	    dtwentyone=1 # To check later
	fi
    else
	while true; do
	    echo Dealer: $(display-hand $dealer dealer)
	    echo You: $(display-hand $player player)

	    predict $dealer $player

	    case $(get-my-input) in
		hit)
		    echo Hit!
		    player=$player$(draw-card)
		    #  if [ $(count-value $player) -gt 21 ]; then
		    if [ $(count-value $player) -ge 21 ]; then # Stop on 21
			break
		    fi;;
		double)
		    echo Double!
		    player=$player$(draw-card)
		    ((pbet *= 2))
		    break;;
		stand)
		    echo Stand!
		    break;;
		split)
		    twohands=1 # Keep track of how many hands we've got
		    echo Split!
		    split-hand $player
		    break;;
	    esac
	done
    fi



    pcount=$(count-value $player)
    if [ $pcount -gt 21 ]; then
	echo "Bust!  You lose!"
	((pmoney -= pbet))
    else
	dealer=$(play-dealer $dealer)
	dcount=$(count-value $dealer)
	echo Dealer: $(display-hand $dealer full)
	echo You: $(display-hand $player full)
	if [ "$twentyone" = 1 ]; then # Quoted incase it's 0
	    if [ "$dtwentyone" = 1 ]; then
		echo "Push, you tie!"
	    else
		echo "Blackjack, you win!"
		((pmoney += $((pbet*3/2))))
	    fi
	elif [ $dcount -gt 21 ]; then
	    echo "Dealer busts, you win!"
	    ((pmoney += pbet))
	elif [ $pcount -gt $dcount ]; then
	    echo "You win!"
	    ((pmoney += pbet))
	elif [ $dcount -gt $pcount ]; then
	    echo "You lose!"
	    ((pmoney -= pbet))
	else
	    echo "Push, you tie!"
	fi
    fi

    if [ "$twohands" = 1 ]; then
	gpcount=$(count-value $ghost)
	if [ $gpcount -gt 21 ]; then
	    echo "Bust!  You lose!"
	    ((pmoney -= gpbet))
	else
	    # dealer=$(play-dealer $dealer)
	    dcount=$(count-value $dealer)
	    echo Dealer: $(display-hand $dealer full)
	    echo You: $(display-hand $ghost full)
	    if [ "$twentyone" = 1 ]; then # Quoted incase it's 0
		if [ "$dtwentyone" = 1 ]; then
		    echo "Push, you tie!"
		else
		    echo "Blackjack, you win!"
		    ((pmoney += $((gpbet*3/2))))
		fi
	    elif [ $dcount -gt 21 ]; then
		echo "Dealer busts, you win!"
		((pmoney += gpbet))
	    elif [ $gpcount -gt $dcount ]; then
		echo "You win!"
		((pmoney += gpbet))
	    elif [ $dcount -gt $gpcount ]; then
		echo "You lose!"
		((pmoney -= gpbet))
	    else
		echo "Push, you tie!"
	    fi
	fi
    fi


    add-used $dealer
    add-used $player
    if [ "$twohands" = 1 ]; then
	add-used $ghost
    fi
    case $(play-again) in
	yes)
	    if [ $pmoney -gt 0 ]; then
		play-round $pmoney
	    else
		echo "You have no more money!"
	    fi;;
	no)
	    echo "You have $pmoney dollars";;
    esac
}

function main() {
    clear-used
    shuffle-cards
    play-round 100
}

#  PREFIX=$PWD
PREFIX="$HOME/bin"
if [ -L "$0" ]; then
    PREFIX=$(ls -l "$0" | sed -e 's/.*-> \(.*\)/\1/')
    PREFIX=${PREFIX%/*}
fi
CARDFILE=$PREFIX/cards
USEDCARDS=$PREFIX/usedcards
main "$@"
