#!/usr/bin/env bash
# update by Amory Meltzer
# UPDATE ALL THE THINGS!!!
# https://xkcd.com/1579/
## brew/cask sudo deescalation
## Need to exit if not run as 'sudo update'
## Better color management
## TODO: Grep and detect errors for each step

function help {
    cat <<END_HELP
Usage: $(basename $0) [-bmMpPgrRnNekEKcCLhH]

  -b		skip updating macports base, but 'port sync' to update tree
  -m		check for macports updates but don't upgrade
  -M		skip all macports actions
  -p		check for python updates but don't upgrade
  -P		skip all python actions
  -g		skip updating gem itself
  -r		check for ruby updates but don't upgrade
  -R		skip all ruby actions
  -n		check for npm nodejs updates (global) but don't upgrade
  -N		skip all npm nodejs actions
  -e		pull homebrew and hombrew-cask changes but don't upgrade homebrew
  -k		skip all homebrew-cask updates
  -E -K		skip all homebrew and homebrew-cask updates
  -c		check for cpan updates but don't upgrade
  -C		skip all cpan actions
  -L		skip all emacs lisp actions
  -h -H		this help
END_HELP
}

# Parse commandline options
while getopts 'bcCeEgkKLmMnNpPrRhH' opt; do
    case $opt in
	b) base_flag='1';;
	m) macports_flag='1';;
	M) macports_all_flag='2';;
	p) python_flag='1';;
	P) python_all_flag='2';;
	g) gem_flag='1';;
	r) ruby_flag='1';;
	R) ruby_all_flag='2';;
	n) npm_flag='1';;
	N) npm_all_flag='2';;
	e) homebrew_flag='1';;
	k) brewcask_flag='1';;
	E|K) homebrew_all_flag='2';;
	c) cpan_flag='1';;
	C) cpan_all_flag='2';;
	L) emacs_all_flag='2';;
	h|H) help $0
	     exit 0;;
	\?) printf "Invalid option: -"$opt", try $0 -h\n" >&2
            exit 1;;
	:) printf "Option -"$opt" requires an argument, try $0 -h\n" >&2
           exit 1;;
    esac
done

# Efficiently colorize
updating () {
    echo -e "$(date -u +'%H:%M') ${Color_Cyan}Updating ${Color_Magenta_Intense}$1${Color_zOff}..."
}
cleaning () {
    echo -e "$(date -u +'%H:%M') ${Color_White}Cleaning ${Color_Magenta_Intense}$1${Color_zOff}..."
}
# FIXME TODO
checking () {
    echo -e "$(date -u +'%H:%M') ${Color_Green}Checking ${Color_Magenta_Intense}$1${Color_zOff}..."
}

# Ask for sudo early
sudo -v

# Do things it suggests, like port select and so on ;;;;;; ##### FIXME TODO
if [[ -z $macports_all_flag ]]; then
    if [[ -z $base_flag ]]; then
	updating 'Macports base'
	port selfupdate
    else
	updating 'Macports tree'
	port sync
    fi
    checking 'Macports'
    port_todo=$(port outdated | tail +2)
    if [[ -n $port_todo ]]; then
	echo "$port_todo"
	echo -e "${Color_Green}What's new in ${Color_Red_Intense}MacPorts${Color_zOff}..."
	port echo outdated | cut -f 1 -d ' ' | xargs -n 1 ~/bin/port-whatsnew.sh
	if [[ -z $macports_flag ]]; then
	    updating 'Macports'
	    port upgrade outdated
	    cleaning 'Macports'
	    port uninstall inactive;
	    if [[ -n $(port echo leaves) ]]; then
		echo -e "${Color_Green}Logging leaves${Color_zOff}..."
		port echo leaves >> ~/port_leaves_log.txt;
		cleaning 'leaves'
		port uninstall leaves;
	    else
		echo -e "${Color_Green}No leaves to clean!${Color_zOff}"
	    fi

	    # Check leaves for installation candidates, reset 8 June 2020
	    readarray -t big_leaves < <(cut -f 1 -d ' ' ~/port_leaves_log.txt | sort | uniq -c | sort -r | head -n 5 | cut -f 4,5 -d ' ')
	    for leaf in "${big_leaves[@]}"; do
		count="${leaf%%' '*}"
		if [ "$count" -ge 25 ]; then
		    echo -e "${Color_White}${leaf#*' '} is a good candidate for installation ($count)${Color_zOff}"
		fi
	    done

	    cleaning 'ports'
	    port -q clean --all installed
	fi
    else
	echo -e "${Color_Green}Ports already up-to-date!${Color_zOff}"
    fi
fi

if [[ -z $python_all_flag ]]; then
    checking 'pip python packages'
    python_todo=$(sudo -u $SUDO_USER pip list -o)
    if [[ -n $python_todo ]]; then
	echo "$python_todo"
	if [[ -z $python_flag ]]; then
	    updating 'pip python packages'
	    pipupgrade;
	fi
    else
	echo -e "${Color_Green}pip python packages already up-to-date!${Color_zOff}"
    fi
fi

if [[ -z $ruby_all_flag ]]; then
    if [[ -z $gem_flag ]]; then
	updating 'gem ruby manager'
	gem update --system
    fi
    checking 'ruby gems'
    ruby_todo=$(gem outdated)
    if [[ -n $ruby_todo ]]; then
	echo "$ruby_todo"
	if [[ -z $ruby_flag ]]; then
	    updating 'ruby gems'
	    gem update
	    cleaning 'ruby gems'
	    gem cleanup;
	fi
    else
	echo -e "${Color_Green}ruby gems already up-to-date!${Color_zOff}"
    fi
fi

if [[ -z $npm_all_flag ]]; then
    checking 'npm nodejs packages (global)'
    # Means I miss out on the cool coloring in the output
    npm_todo=$(sudo -u $SUDO_USER npm outdated --global)
    if [[ -n $npm_todo ]]; then
	echo "$npm_todo"
	if [[ -z $npm_flag ]]; then
	    updating 'npm nodejs packages (global)'
	    # skip column headers, pass package names to npm install since
	    # global implies caret semver https://github.com/npm/cli/issues/746
	    echo "$npm_todo" | tail -n +2 | cut -f 1 -d ' ' | xargs sudo -u $SUDO_USER npm install --global
	fi
    else
	echo -e "${Color_Green}npm nodejs packages already up-to-date!${Color_zOff}"
    fi
fi

## Should probably make this verbose or something
if [[ -z $homebrew_all_flag ]]; then
    updating 'Homebrew repository'
    sudo -u $SUDO_USER brew update
    if [[ -z $homebrew_flag ]]; then
	# Skip items that require a newer macOS
	brew_todo=$(sudo -u $SUDO_USER brew outdated|grep -v wallpaper)
	if [[ -n $brew_todo ]]; then
	    updating 'brews'
	    echo "$brew_todo"
	    # brew upgrade now handles casks, but I still prefer cu
	    echo $brew_todo|xargs sudo -u $SUDO_USER brew upgrade --formula

	    cleaning 'brews'
	    sudo -u $SUDO_USER brew cleanup -s
	else
	    echo -e "${Color_Green}brews already up-to-date!${Color_zOff}"
	fi
    fi

    if [[ -z $brewcask_flag ]]; then
	# Uses brew cu, mainly for the superior pinning ability
	# https://github.com/buo/homebrew-cask-upgrade
	# Want autoupdating casks, but not latest
	cask_todo=$(sudo -u $SUDO_USER brew cask outdated --greedy --verbose|grep -v latest)
	if [[ -n $cask_todo ]]; then
	    updating 'casks'
	    # echo "$cask_todo"
	    sudo -u $SUDO_USER brew cu -aqy --no-brew-update

	    cleaning 'casks'
	    sudo -u $SUDO_USER brew cleanup -s
	else
	    echo -e "${Color_Green}casks already up-to-date!${Color_zOff}"
	fi
    fi
fi

if [[ -z $cpan_all_flag ]]; then
    checking 'CPAN modules'
    cpan_todo=$(cpan-outdated --verbose)
    if [[ -n $cpan_todo ]]; then
	echo "$cpan_todo"
	if [[ -z $cpan_flag ]]; then
	    updating 'CPAN modules'
	    # Should probably just cut -f 1 -d ' '
	    if [[ -f `command -v cpanm` ]]; then
		cpan-outdated -p | cpanm
	    else
		cpan-outdated -p | xargs cpan -i
	    fi
	    cleaning 'CPAN directories'
	    cpanclean;
	fi
    else
	echo -e "${Color_Green}CPAN modules already up-to-date!${Color_zOff}"
    fi
fi

if [[ -z $emacs_all_flag ]]; then
    updating 'emacs lisp packages'
    sudo -u $SUDO_USER update_elisp.sh;
fi
