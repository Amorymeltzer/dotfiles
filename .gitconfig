[hub]
protocol = https

[github]
user = Amorymeltzer

[user]
name = Amory Meltzer
email = Amorymeltzer@gmail.com

[credential]
helper = osxkeychain

[core]
# Use custom `.gitignore`
excludesfile = ~/.global-gitignore
# editor and pager set in include

# Treat spaces before tabs, lines that are indented with 8 or more spaces,
# and all kinds of trailing whitespace as an error
# [default] trailing-space: look for spaces at the end of a line
# [default] space-before-tab: look for spaces before tabs at beginning of line
whitespace = space-before-tab,indent-with-non-tab,trailing-space

# Make `git rebase` safer on OS X 10.7+ with autosave/versions
# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
trustctime = false

# Prevent showing files whose names contain non-ASCII symbols as unversioned.
# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
precomposeunicode = false

# Use 12 characters for the abbreviated commit hash. See:
# http://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
# Via: http://git.io/QXnAqw
# abbrev = 12

[commit]
verbose = true
gpgSign = true
# gpg.program set in include

[alias]
h = help
cfg = config --global

# Depends on hub
home = browse
repo = browse
pulls = browse -- pulls
issues = browse -- issues
mypulls = browse -- pulls/amorymeltzer
commits = browse -- commits

notifications = "!browser https://github.com/notifications"
allpulls = "!browser https://github.com/pulls"
allissues = "!browser https://github.com/issues"

open = "!github-open "

first-commit = "!git init && git commit --alow-empty -m 'Initial commit'"
init-commit = "!git init && git commit --alow-empty -m 'Initial commit'"

c = commit
cm = commit -m
amend = commit --amend
commend = commit --amend --no-edit
amend-resetauthor = commit --amend --reset-author
commend-resetauthor = commit --amend --no-edit --reset-author
amr = commit --amend --reset-author
cor = commit --amend --no-edit --reset-author
a = add
aa = add -A
all = add -A
# Don't do anything unless there are any staged changes
# More specific (staged) than diff-index
aas = "!git add -A; git diff --staged --name-only --quiet || git status --short --branch"
acm = "!git add -A; git diff --staged --name-only --quiet || git commit -m"
aca = "!git add -A; git diff --staged --name-only --quiet || git commit --amend"
acc = "!git add -A; git diff --staged --name-only --quiet || git commit --amend --no-edit"

co = checkout
com = checkout master
cog = checkout gh-pages
cod = checkout dev
gom = checkout master
gog = checkout gh-pages
god = checkout dev
wc = whatchanged

stat = status
st = status
s = status --short --branch
sn = status --untracked=no
# Should do something more interesting/useful/unified with these
l = log --decorate --graph
l5 = log --decorate --graph -5
l1 = log --oneline --decorate
l15 = log --oneline --decorate -5

# Potentially overridden in local-config to use date=human after 2.21, see also [log]
ld = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=relative
ld5 = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=relative -5

lf = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=short
lf5 = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=short -5
# Yet another one: https://github.com/jfrazelle/mac-dev-setup#bash-completions
lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) (%ar)%C(bold blue)<%an>%Creset' --abbrev-commit
#grog = git log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)"

lm = log --oneline --decorate master..head
llm = log --decorate master..head

# TODO
#ls = ls-files

# View abbreviated SHA, description, and history graph of the latest 20 commits
graph = log --pretty=oneline --graph --abbrev-commit --decorate

# Like "git show myfile", but uses the last commit that changed "myfile".
showlast = log -n 1 -p
last = log -n 1 -p
# List contributors by number of commits
contributors = "!git --no-pager shortlog --summary --numbered --no-merges"
top-contributors = "!t() { c=${1:-10}; git --no-pager shortlog --summary --numbered --no-merges | head -n $c; }; t"
contributors-merges = "!git --no-pager shortlog --summary --numbered"
top-contributors-merges = "!t() { c=${1:-10}; git --no-pager shortlog --summary --numbered | head -n $c; }; t"

difflog = log -u
rl = reflog --decorate

cl = clone

# Show verbose output
tags = tag -n
remotes = remote -v

b = branch
br = branch
bv = branch -vv
branches = branch -vv
ba = branch -a -vv
brd = branch -a -vv
branches-local = !git branch -av | grep -v remotes
brl = !git branch -av | grep -v remotes
branch-name = copy-branch-name
# https://stackoverflow.com/a/5188364/2521092
# Only show most recent 15
recent-branches-by-commit = for-each-ref --sort=-committerdate --count=15 refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

# Create and/or go to a branch
# With git 2.23, uses switch -c; can do the same with checkout -b
go = "!f() { git switch -c \"$1\" 2> /dev/null || git switch \"$1\"; }; f"

# Easily rememberable
remove-merged-branches = delete-merged-branches
list-large-files = big-object-report

rb = rebase
reb = rebase
rebc = rebase --continue
reba = rebase --abort
rebs = rebase --skip
rbm = rebase master
rebm = rebase master
rebd = rebase dev
# Interactive rebase with the selected number of latest commits
rebi = "!r() { git rebase -i HEAD~$1; }; r"
# As above, but with the --exec option
rebix = "!r() { git rebase -i -x \"$2\" HEAD~$1; }; r"
rebim = rebase -i master

# Push and Pull
po = push origin
pou = push -u origin
pom = push origin master
pog = push origin gh-pages
pod = push origin dev
# Use rebase to prevent unnecessary commits
pum = pull --rebase origin master
puo = pull --rebase origin
pu = pull --rebase 
# Personal remote
pa = push Amorymeltzer
pau = push -u Amorymeltzer
pam = push Amorymeltzer master
please = push --force-with-lease

d = diff
dw = diff --word-diff
dc = diff --cached
dwc = diff --cached --word-diff
dn = diff --name-only
ds = diff --patch-with-stat
dsc = diff --cached --patch-with-stat
dcs = diff --cached --patch-with-stat
# Compare commit to the state before it
dp = "!f() { c=${1:-HEAD}; git diff $c~ $c; }; f"

patience = diff --patience

# Goodness (summary of diff lines added/removed/total)
# FIXME TODO: Colorize
gn = goodness
gnc = goodness --cached

# Divergence (commits we added and commits remote added)
# FIXME TODO: Colorize
div = divergence

# Copy sha hashes.  Trim new lines since sh's echo doesn't accept -n
hash = "!r() { h=${1:-HEAD}; rev=$(git rev-parse $h); echo $rev; echo $rev | tr -d '\n' | pbcopy; }; r"
sha = "!r() { h=${1:-HEAD}; rev=$(git rev-parse --short $h); echo $rev; echo $rev | tr -d '\n' | pbcopy; }; r"
short = sha

unstage = reset HEAD --
re = reset
reh = reset --hard
res = reset --soft

# Assume/Unassume changes
assume = update-index --assume-unchanged
unassume = update-index --no-assume-unchanged
assumed = "!git ls-files -v | grep ^h | cut -c 3-"
assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

ignored = "!git clean -ndX | sed 's/Would remove //g'"

# Show list of files in a conflict state, loaded elsewhere but here for comparison
# conflicts = "!git ls-files -u | awk '{print $4}' | sort -u"
# List of leftover conflict markers
# See https://stackoverflow.com/a/49382772/2521092
conflict-markers = diff --check

# List all aliases
aliases = "!git config -l | grep alias | cut -c 7-"
# All options
configs = config -l

# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"
# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"
# Find commits by source code
fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%an] %Cred%d' --decorate --date=short -S$1; }; f"
# Find commits by commit message
fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%an] %Cred%d' --decorate --date=short --grep=$1; }; f"

# Show number of commits by minimum length
# Josh Stone @cuviper https://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
uniq-abbrev=!git rev-list --all --abbrev=0 --abbrev-commit | awk '{ a[length] += 1 } END { for (len in a) print len, a[len] }'

# https://gist.github.com/phinze/83387035c233db7c521e by @phinze
# git timespan FROMREF [TOREF] [FORMAT]
# TOREF: defaults to HEAD
# FORMAT: defaults to %mm%dd
# uses `ddiff` from the `dateutils` package
# available via: brew install dateutils, apt-get install dateutils, etc
timespan = "!f() { one=$(git log -n 1 --format=%ai $1); two=$(git log -n 1 --format=%ai ${2:-HEAD}); ddiff -f ${3:-%mm-%dd-%Hh-%Mm} \"$one\" \"$two\"; }; f"

dad = "!curl https://icanhazdadjoke.com/"

[push]
default = simple
# Make `git push` push relevant annotated tags when pushing branches out.
followTags = true

[pull]
ff = only
# Probably obviates the need for the pum/puo/pu aliases?
rebase = true

[fetch]
prune = true

[merge]
# Include summaries of merged commits in newly created merge commit messages
log = true

[rebase]
# Automatically stash before rebase; allows for dirty rebases
autoStash = true
# warn but proceed if commits dropped via exclusion, use drop instead
missingCommitsCheck = warn

[apply]
whitespace = warn

[log]
# --date=human added in 2.21, used in local-config, see also ld aliases
date = local
abbrevCommit = true

[help]
# If there's only suggestion from a typo, automatically call it after 1.5s
autocorrect = 15

[diff]
compactionHeuristic = true
noprefix = true

# Special diffs for special cases
[diff "bin"]
textconv = hexdump -v -C

[diff "zip"]
textconv = unzip -v

[diff "png"]
binary = true
textconv = hexdump -v -C

[diff "jpg"]
binary = true
textconv = hexdump -v -C

[diff "jpeg"]
binary = true
textconv = hexdump -v -C

[diff "plist"]
textconv = plutil -p

[color]
# Use colors in Git commands that are capable of colored output when outputting to the terminal
ui = true

[color "branch"]
current = cyan
local = normal
remote = green

[color "diff"]
meta = white
frag = magenta
old = red
new = green
commit = yellow
whitespace = red reverse

[color "status"]
# header = normal
branch = cyan
added = magenta
changed = green
untracked = cyan
unmerged = red

# Mainly for diff-so-fancy
[color "diff-highlight"]
oldNormal = red# bold
oldHighlight = red bold 52
newNormal = green# bold
newHighlight = green bold 22

[color "blame"]
highlightRecent = yellow, 36 months ago, blue, 1 months ago, white

[gc]
auto = 256

[tag]
# Implies annotated, which is good behavior anyway
gpgSign = true
# gpg.program set in include

[blame]
coloring = highlightRecent
# human in local-config
date = local

[filter "media"]
required = true
clean = git media clean %f
smudge = git media smudge %f
[rebase]
autostash = true
[filter "lfs"]
process = git-lfs filter-process
required = true
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f

# Customize based on local environment, etc.
# eg: core.editor, core.pager, gpg, icdiff, ghi
# Example file at ~/.local-config.example
[include]
path = ~/.config/git/local-config